# Generated by Django 2.2.28 on 2023-09-11 20:48

import bestiary.models.base
import bestiary.models.runes
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bestiary', '0036_delete_balancepatch'),
        ('herders', '0035_auto_20230716_1520'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='DungeonLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('battle_key', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('success', models.NullBooleanField(db_index=True, help_text='Null indicates that run was not completed')),
                ('clear_time', models.DurationField(blank=True, null=True)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Level')),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MagicBoxCraftArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('box_type', models.IntegerField(choices=[(8, 'Unknown Magic Box'), (9, 'Mystical Magic Box'), (12, 'Legendary Magic Box')])),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('generated_on', models.DateTimeField()),
                ('start_timestamp', models.DateTimeField(db_index=True)),
                ('end_timestamp', models.DateTimeField(db_index=True)),
                ('log_count', models.IntegerField()),
                ('unique_contributors', models.IntegerField()),
                ('report', django.contrib.postgres.fields.jsonb.JSONField()),
                ('generated_by_user', models.BooleanField(db_index=True, default=False)),
                ('content_type', models.ForeignKey(blank=True, help_text='The logging model used to generate this report', null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.ContentType')),
            ],
            options={
                'get_latest_by': 'generated_on',
            },
        ),
        migrations.CreateModel(
            name='RiftDungeonLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('grade', models.IntegerField(choices=[(1, 'F'), (2, 'D'), (3, 'C'), (4, 'B-'), (5, 'B'), (6, 'B+'), (7, 'A-'), (8, 'A'), (9, 'A+'), (10, 'S'), (11, 'SS'), (12, 'SSS')], db_index=True)),
                ('total_damage', models.IntegerField(db_index=True)),
                ('clear_time', models.DurationField()),
                ('success', models.BooleanField(db_index=True)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Level')),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiftRaidLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('battle_key', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('success', models.NullBooleanField(db_index=True, help_text='Null indicates that run was not completed')),
                ('contribution_amount', models.IntegerField(blank=True, null=True)),
                ('clear_time', models.DurationField(blank=True, null=True)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Level')),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopRefreshLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('slots_available', models.IntegerField(blank=True, null=True)),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WishLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('wish_id', models.IntegerField()),
                ('wish_sequence', models.IntegerField()),
                ('crystal_used', models.BooleanField()),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorldBossLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('battle_key', models.BigIntegerField(blank=True, null=True)),
                ('grade', models.IntegerField(blank=True, choices=[(1, 'F'), (2, 'D'), (3, 'C'), (4, 'B-'), (5, 'B'), (6, 'B+'), (7, 'A-'), (8, 'A'), (9, 'A+'), (10, 'S'), (11, 'SS'), (12, 'SSS')], null=True)),
                ('damage', models.IntegerField(db_index=True)),
                ('battle_points', models.IntegerField()),
                ('bonus_battle_points', models.IntegerField()),
                ('avg_monster_level', models.FloatField()),
                ('monster_count', models.IntegerField()),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Level')),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MagicBoxCraftingReportArchive',
            fields=[
                ('reportarchive_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='archive.ReportArchive')),
                ('box_type', models.IntegerField(choices=[(8, 'Unknown Magic Box'), (9, 'Mystical Magic Box'), (12, 'Legendary Magic Box')], db_index=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('archive.reportarchive',),
        ),
        migrations.CreateModel(
            name='MagicShopRefreshReportArchive',
            fields=[
                ('reportarchive_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='archive.ReportArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=('archive.reportarchive',),
        ),
        migrations.CreateModel(
            name='RuneCraftingReportArchive',
            fields=[
                ('reportarchive_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='archive.ReportArchive')),
                ('craft_level', models.IntegerField(choices=[(1, 'Low'), (2, 'Mid'), (3, 'High'), (4, 'Ancient'), (5, 'Legend')], db_index=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('archive.reportarchive',),
        ),
        migrations.CreateModel(
            name='WishReportArchive',
            fields=[
                ('reportarchive_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='archive.ReportArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=('archive.reportarchive',),
        ),
        migrations.CreateModel(
            name='WorldBossLogRuneDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField(db_index=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('ancient', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('substats_enchanted', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, default=False), default=list, size=4)),
                ('substats_grind_value', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=0), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('has_grind', models.IntegerField(default=0, help_text='Number of grindstones applied')),
                ('has_gem', models.BooleanField(default=False, help_text='Has had an enchant gem applied')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='archive.WorldBossLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='WorldBossLogMonsterDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='archive.WorldBossLogArchive')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorldBossLogItemDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='archive.WorldBossLogArchive')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WishLogRuneDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField(db_index=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('ancient', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('substats_enchanted', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, default=False), default=list, size=4)),
                ('substats_grind_value', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=0), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('has_grind', models.IntegerField(default=0, help_text='Number of grindstones applied')),
                ('has_gem', models.BooleanField(default=False, help_text='Has had an enchant gem applied')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='archive.WishLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='WishLogMonsterDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='archive.WishLogArchive')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WishLogItemDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='archive.WishLogArchive')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SummonLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('grade', models.IntegerField(blank=True, null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('blessing_id', models.IntegerField(blank=True, null=True)),
                ('item', models.ForeignKey(help_text='Item or currency used to summon', on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('monster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopRefreshRuneDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField(db_index=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('ancient', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('substats_enchanted', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, default=False), default=list, size=4)),
                ('substats_grind_value', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=0), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('has_grind', models.IntegerField(default=0, help_text='Number of grindstones applied')),
                ('has_gem', models.BooleanField(default=False, help_text='Has had an enchant gem applied')),
                ('cost', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='archive.ShopRefreshLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='ShopRefreshMonsterDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('cost', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='archive.ShopRefreshLogArchive')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShopRefreshItemDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('cost', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='archive.ShopRefreshLogArchive')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiftRaidRuneCraftDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem'), (4, 'Ancient Grindstone'), (5, 'Ancient Gem')])),
                ('rune', models.IntegerField(blank=True, choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')], null=True)),
                ('stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')])),
                ('value', models.IntegerField(blank=True, null=True)),
                ('wizard_id', models.BigIntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rune_crafts', to='archive.RiftRaidLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='RiftRaidMonsterDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('wizard_id', models.BigIntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='archive.RiftRaidLogArchive')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiftRaidItemDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('wizard_id', models.BigIntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='archive.RiftRaidLogArchive')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiftDungeonRuneDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField(db_index=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('ancient', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('substats_enchanted', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, default=False), default=list, size=4)),
                ('substats_grind_value', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=0), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('has_grind', models.IntegerField(default=0, help_text='Number of grindstones applied')),
                ('has_gem', models.BooleanField(default=False, help_text='Has had an enchant gem applied')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='archive.RiftDungeonLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='RiftDungeonRuneCraftDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem'), (4, 'Ancient Grindstone'), (5, 'Ancient Gem')])),
                ('rune', models.IntegerField(blank=True, choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')], null=True)),
                ('stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')])),
                ('value', models.IntegerField(blank=True, null=True)),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rune_crafts', to='archive.RiftDungeonLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='RiftDungeonMonsterDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='archive.RiftDungeonLogArchive')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiftDungeonItemDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='archive.RiftDungeonLogArchive')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MagicBoxCraftRuneDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField(db_index=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('ancient', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('substats_enchanted', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, default=False), default=list, size=4)),
                ('substats_grind_value', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=0), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('has_grind', models.IntegerField(default=0, help_text='Number of grindstones applied')),
                ('has_gem', models.BooleanField(default=False, help_text='Has had an enchant gem applied')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='archive.MagicBoxCraftArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='MagicBoxCraftRuneCraftDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem'), (4, 'Ancient Grindstone'), (5, 'Ancient Gem')])),
                ('rune', models.IntegerField(blank=True, choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')], null=True)),
                ('stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')])),
                ('value', models.IntegerField(blank=True, null=True)),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rune_crafts', to='archive.MagicBoxCraftArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='MagicBoxCraftItemDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='archive.MagicBoxCraftArchive')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FullLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('command', models.TextField(db_index=True, max_length=150)),
                ('request', django.contrib.postgres.fields.jsonb.JSONField()),
                ('response', django.contrib.postgres.fields.jsonb.JSONField()),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DungeonSecretDungeonDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Level')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secret_dungeons', to='archive.DungeonLogArchive')),
            ],
        ),
        migrations.CreateModel(
            name='DungeonRuneDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField(db_index=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('ancient', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('substats_enchanted', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, default=False), default=list, size=4)),
                ('substats_grind_value', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=0), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('has_grind', models.IntegerField(default=0, help_text='Number of grindstones applied')),
                ('has_gem', models.BooleanField(default=False, help_text='Has had an enchant gem applied')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='archive.DungeonLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='DungeonRuneCraftDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem'), (4, 'Ancient Grindstone'), (5, 'Ancient Gem')])),
                ('rune', models.IntegerField(blank=True, choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')], null=True)),
                ('stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')])),
                ('value', models.IntegerField(blank=True, null=True)),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rune_crafts', to='archive.DungeonLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='DungeonMonsterPieceDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monster_pieces', to='archive.DungeonLogArchive')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DungeonMonsterDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='archive.DungeonLogArchive')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DungeonItemDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='archive.DungeonLogArchive')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DungeonArtifactDropArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.IntegerField(choices=[(1, 'Element'), (2, 'Archetype')], db_index=True)),
                ('element', models.CharField(blank=True, choices=[('fire', 'Fire'), ('wind', 'Wind'), ('water', 'Water'), ('light', 'Light'), ('dark', 'Dark')], db_index=True, max_length=6, null=True)),
                ('archetype', models.CharField(blank=True, choices=[('attack', 'Attack'), ('hp', 'HP'), ('support', 'Support'), ('defense', 'Defense'), ('material', 'Material')], db_index=True, max_length=10, null=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('original_quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')])),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (3, 'ATK'), (5, 'DEF')])),
                ('main_stat_value', models.IntegerField(blank=True, editable=False)),
                ('effects', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'ATK+ Proportional to Lost HP'), (2, 'DEF+ Proportional to Lost HP'), (3, 'SPD+ Proportional to Lost HP'), (4, 'SPD Under Inability'), (5, 'ATK Increased'), (6, 'DEF Increased'), (7, 'SPD Increased'), (8, 'CRI Rate Increased'), (9, 'Counterattack Damage Increased'), (10, 'Cooperative Attack Damage Increased'), (11, 'Bomb Damage Increased'), (12, 'Reflected Damage Increased'), (13, 'Crushing Hit Damage Increased'), (14, 'Damage Received Under Inability Decreased'), (15, 'Crit Damage Received Decreased'), (16, 'Life Drain Increased'), (17, 'HP When Revived Increased'), (18, 'Attack Bar When Revived Increased'), (19, 'Damage Increased By % of HP'), (20, 'Damage Increased By % of ATK'), (21, 'Damage Increased By % of DEF'), (22, 'Damage Increased By % of SPD'), (23, 'Damage To Fire Increased'), (24, 'Damage To Water Increased'), (25, 'Damage To Wind Increased'), (26, 'Damage To Light Increased'), (27, 'Damage To Dark Increased'), (28, 'Damage From Fire Decreased'), (29, 'Damage From Water Decreased'), (30, 'Damage From Wind Decreased'), (31, 'Damage From Light Decreased'), (32, 'Damage From Dark Decreased'), (33, 'Skill 1 CRI Damage Increased'), (34, 'Skill 2 CRI Damage Increased'), (35, 'Skill 3 CRI Damage Increased'), (36, 'Skill 4 CRI Damage Increased'), (37, 'Skill 1 Recovery Increased'), (38, 'Skill 2 Recovery Increased'), (39, 'Skill 3 Recovery Increased'), (40, 'Skill 1 Accuracy Increased'), (41, 'Skill 2 Accuracy Increased'), (42, 'Skill 3 Accuracy Increased'), (43, "CRIT DMG+ up to N% as the enemy's HP condition is good"), (44, "CRIT DMG+ up to N% as the enemy's HP condition is bad"), (45, 'Single-target skill CRIT DMG +%'), (46, 'Counterattack and Cooperative Attack Damage Increased'), (47, 'ATK and DEF Increased'), (48, 'Skill 3 and Skill 4 CRI Damage Increased'), (49, 'First Attack CRI Damage Increased')], null=True), blank=True, default=list, help_text='Bonus effect type', size=4)),
                ('effects_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(blank=True, null=True), blank=True, default=list, help_text='Bonus value of this effect', size=4)),
                ('effects_upgrade_count', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, default=list, help_text='Number of upgrades this effect received when leveling artifact', size=4)),
                ('effects_reroll_count', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, default=list, help_text='Number times this upgrades was rerolled with conversion stone', size=4)),
                ('efficiency', models.FloatField(blank=True)),
                ('max_efficiency', models.FloatField(blank=True)),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artifacts', to='archive.DungeonLogArchive')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.base.Quality, bestiary.models.base.Archetype, bestiary.models.base.Elements, bestiary.models.base.Stats),
        ),
        migrations.CreateModel(
            name='CraftRuneLogArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance'), (22, 'Intangible'), (23, 'Seal')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField(db_index=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('ancient', models.BooleanField(default=False)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('substats_enchanted', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, default=False), default=list, size=4)),
                ('substats_grind_value', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, default=0), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('has_grind', models.IntegerField(default=0, help_text='Number of grindstones applied')),
                ('has_gem', models.BooleanField(default=False, help_text='Has had an enchant gem applied')),
                ('archived_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('craft_level', models.IntegerField(choices=[(1, 'Low'), (2, 'Mid'), (3, 'High'), (4, 'Ancient'), (5, 'Legend')])),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'ordering': ('-timestamp', '-pk'),
                'get_latest_by': 'timestamp',
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.runes.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='SummonReportArchive',
            fields=[
                ('reportarchive_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='archive.ReportArchive')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
            ],
            options={
                'abstract': False,
            },
            bases=('archive.reportarchive',),
        ),
        migrations.CreateModel(
            name='LevelReportArchive',
            fields=[
                ('reportarchive_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='archive.ReportArchive')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='archived_logs', to='bestiary.Level')),
            ],
            options={
                'abstract': False,
            },
            bases=('archive.reportarchive',),
        ),
    ]
