# Generated by Django 2.1.4 on 2019-01-31 06:26

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('com2us_id', models.IntegerField()),
                ('name', models.CharField(max_length=30)),
                ('max_level', models.IntegerField()),
                ('area', models.IntegerField(blank=True, choices=[(0, 'Everywhere'), (1, 'Guild Content')], null=True)),
                ('affected_stat', models.IntegerField(blank=True, choices=[(0, 'HP'), (1, 'ATK'), (2, 'DEF'), (3, 'SPD'), (4, 'CRI Rate'), (5, 'CRI Dmg'), (6, 'Resistance'), (7, 'Accuracy'), (8, 'Max. Energy'), (9, 'Mana Stone Storage'), (10, 'Mana Stone Production Rate'), (11, 'Energy Production Rate'), (12, 'Arcane Tower ATK'), (13, 'Arcane Tower SPD')], null=True)),
                ('element', models.CharField(blank=True, choices=[('pure', 'Pure'), ('fire', 'Fire'), ('wind', 'Wind'), ('water', 'Water'), ('light', 'Light'), ('dark', 'Dark')], max_length=6, null=True)),
                ('stat_bonus', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('upgrade_cost', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon_filename', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CraftMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('com2us_id', models.IntegerField()),
                ('name', models.CharField(max_length=40)),
                ('icon_filename', models.CharField(blank=True, max_length=100, null=True)),
                ('sell_value', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dungeon',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('max_floors', models.IntegerField(default=10)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('category', models.IntegerField(blank=True, choices=[(0, 'Scenarios'), (1, 'Rune Dungeons'), (2, 'Elemental Dungeons'), (3, 'Other Dungeons'), (4, 'Raids'), (5, 'Hall of Heroes')], null=True)),
                ('energy_cost', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None), blank=True, null=True, size=None)),
                ('xp', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None), blank=True, null=True, size=None)),
                ('monster_slots', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None), blank=True, null=True, size=None)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Fusion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stars', models.IntegerField()),
                ('cost', models.IntegerField()),
                ('meta_order', models.IntegerField(db_index=True, default=0)),
            ],
            options={
                'ordering': ['meta_order'],
            },
        ),
        migrations.CreateModel(
            name='HomunculusSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mana_cost', models.IntegerField(default=0, help_text='Cost to purchase')),
            ],
        ),
        migrations.CreateModel(
            name='HomunculusSkillCraftCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('craft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.CraftMaterial')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.HomunculusSkill')),
            ],
        ),
        migrations.CreateModel(
            name='LeaderSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.IntegerField(choices=[(1, 'HP'), (2, 'Attack Power'), (3, 'Defense'), (4, 'Attack Speed'), (5, 'Critical Rate'), (6, 'Resistance'), (7, 'Accuracy'), (8, 'Critical DMG')], help_text='Monster stat which is granted the bonus')),
                ('amount', models.IntegerField(help_text='Amount of bonus granted')),
                ('area', models.IntegerField(choices=[(1, 'General'), (2, 'Dungeon'), (3, 'Element'), (4, 'Arena'), (5, 'Guild')], default=1, help_text='Where this leader skill has an effect')),
                ('element', models.CharField(blank=True, choices=[('pure', 'Pure'), ('fire', 'Fire'), ('wind', 'Wind'), ('water', 'Water'), ('light', 'Light'), ('dark', 'Dark')], help_text='Element of monster which this leader skill applies to', max_length=6, null=True)),
            ],
            options={
                'verbose_name': 'Leader Skill',
                'verbose_name_plural': 'Leader Skills',
                'ordering': ['attribute', 'amount', 'element'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor', models.IntegerField()),
                ('difficulty', models.IntegerField(blank=True, choices=[(1, 'Normal'), (2, 'Hard'), (3, 'Hell')], null=True)),
                ('energy_cost', models.IntegerField(blank=True, help_text='Energy cost to start a run', null=True)),
                ('xp', models.IntegerField(blank=True, help_text='XP gained by fully clearing the level', null=True)),
                ('frontline_slots', models.IntegerField(default=5, help_text='Serves as general slots if dungeon does not have front/back lines')),
                ('backline_slots', models.IntegerField(blank=True, help_text='Leave null for normal dungeons', null=True)),
                ('max_slots', models.IntegerField(blank=True, help_text='Maximum monsters combined front/backline. Not required if backline not specified.', null=True)),
                ('dungeon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Dungeon')),
            ],
            options={
                'ordering': ('difficulty', 'floor'),
            },
        ),
        migrations.CreateModel(
            name='Monster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('com2us_id', models.IntegerField(blank=True, help_text='ID given in game data files', null=True)),
                ('family_id', models.IntegerField(blank=True, help_text='Identifier that matches same family monsters', null=True)),
                ('image_filename', models.CharField(blank=True, max_length=250, null=True)),
                ('element', models.CharField(choices=[('pure', 'Pure'), ('fire', 'Fire'), ('wind', 'Wind'), ('water', 'Water'), ('light', 'Light'), ('dark', 'Dark')], default='fire', max_length=6)),
                ('archetype', models.CharField(choices=[('none', 'None'), ('attack', 'Attack'), ('hp', 'HP'), ('support', 'Support'), ('defense', 'Defense'), ('material', 'Material')], default='attack', max_length=10)),
                ('base_stars', models.IntegerField(choices=[(1, '1<span class="glyphicon glyphicon-star"></span>'), (2, '2<span class="glyphicon glyphicon-star"></span>'), (3, '3<span class="glyphicon glyphicon-star"></span>'), (4, '4<span class="glyphicon glyphicon-star"></span>'), (5, '5<span class="glyphicon glyphicon-star"></span>'), (6, '6<span class="glyphicon glyphicon-star"></span>')], help_text='Default stars a monster is summoned at')),
                ('obtainable', models.BooleanField(default=True, help_text='Is available for players to acquire')),
                ('can_awaken', models.BooleanField(default=True, help_text='Has an awakened form')),
                ('is_awakened', models.BooleanField(default=False, help_text='Is the awakened form')),
                ('awaken_bonus', models.TextField(blank=True, help_text='Bonus given upon awakening')),
                ('skill_ups_to_max', models.IntegerField(blank=True, help_text='Number of skill-ups required to max all skills', null=True)),
                ('raw_hp', models.IntegerField(blank=True, help_text='HP value from game data files', null=True)),
                ('raw_attack', models.IntegerField(blank=True, help_text='ATK value from game data files', null=True)),
                ('raw_defense', models.IntegerField(blank=True, help_text='DEF value from game data files', null=True)),
                ('base_hp', models.IntegerField(blank=True, help_text='HP at base_stars lvl 1', null=True)),
                ('base_attack', models.IntegerField(blank=True, help_text='ATK at base_stars lvl 1', null=True)),
                ('base_defense', models.IntegerField(blank=True, help_text='DEF at base_stars lvl 1', null=True)),
                ('max_lvl_hp', models.IntegerField(blank=True, help_text='HP at 6-stars lvl 40', null=True)),
                ('max_lvl_attack', models.IntegerField(blank=True, help_text='ATK at 6-stars lvl 40', null=True)),
                ('max_lvl_defense', models.IntegerField(blank=True, help_text='DEF at 6-stars lvl 40', null=True)),
                ('speed', models.IntegerField(blank=True, null=True)),
                ('crit_rate', models.IntegerField(blank=True, null=True)),
                ('crit_damage', models.IntegerField(blank=True, null=True)),
                ('resistance', models.IntegerField(blank=True, null=True)),
                ('accuracy', models.IntegerField(blank=True, null=True)),
                ('homunculus', models.BooleanField(default=False)),
                ('craft_cost', models.IntegerField(blank=True, help_text='Mana cost to craft this monster', null=True)),
                ('awaken_mats_fire_low', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_fire_mid', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_fire_high', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_water_low', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_water_mid', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_water_high', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_wind_low', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_wind_mid', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_wind_high', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_light_low', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_light_mid', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_light_high', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_dark_low', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_dark_mid', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_dark_high', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_magic_low', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_magic_mid', models.IntegerField(blank=True, default=0)),
                ('awaken_mats_magic_high', models.IntegerField(blank=True, default=0)),
                ('farmable', models.BooleanField(default=False, help_text='Monster can be acquired easily without luck')),
                ('fusion_food', models.BooleanField(default=False, help_text='Monster is used as a fusion ingredient')),
                ('bestiary_slug', models.SlugField(editable=False, max_length=255, null=True)),
                ('awakens_from', models.ForeignKey(blank=True, help_text='Unawakened form of this monster', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='bestiary.Monster')),
                ('awakens_to', models.ForeignKey(blank=True, help_text='Awakened form of this monster', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='bestiary.Monster')),
            ],
            options={
                'ordering': ['name', 'element'],
            },
        ),
        migrations.CreateModel(
            name='MonsterCraftCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('craft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.CraftMaterial')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Monster')),
            ],
        ),
        migrations.CreateModel(
            name='MonsterGuide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_text', models.TextField(blank=True, default='')),
                ('long_text', models.TextField(blank=True, default='')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('edited_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('monster', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Monster')),
            ],
            options={
                'ordering': ['monster__name'],
            },
        ),
        migrations.CreateModel(
            name='ScalingStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stat', models.CharField(max_length=20)),
                ('com2us_desc', models.CharField(blank=True, max_length=30, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Scaling Stat',
                'verbose_name_plural': 'Scaling Stats',
                'ordering': ['stat'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('com2us_id', models.IntegerField(blank=True, help_text='ID given in game data files', null=True)),
                ('description', models.TextField()),
                ('slot', models.IntegerField(default=1, help_text='Which button position the skill is in during battle')),
                ('cooltime', models.IntegerField(blank=True, help_text='Number of turns until skill can be used again', null=True)),
                ('hits', models.IntegerField(default=1, help_text='Number of times this skill hits an enemy')),
                ('aoe', models.BooleanField(default=False, help_text='Skill affects all enemies or allies')),
                ('passive', models.BooleanField(default=False, help_text='Skill activates automatically')),
                ('max_level', models.IntegerField()),
                ('level_progress_description', models.TextField(blank=True, help_text='Description of bonus each skill level', null=True)),
                ('icon_filename', models.CharField(blank=True, max_length=100, null=True)),
                ('multiplier_formula', models.TextField(blank=True, help_text='Parsed multiplier formula', null=True)),
                ('multiplier_formula_raw', models.CharField(blank=True, help_text='Multiplier formula given in game data files', max_length=150, null=True)),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['slot', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SkillEffect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_buff', models.BooleanField(default=True, help_text='Effect is beneficial to affected monster')),
                ('name', models.CharField(max_length=40)),
                ('description', models.TextField()),
                ('icon_filename', models.CharField(blank=True, default='', max_length=100)),
            ],
            options={
                'verbose_name': 'Skill Effect',
                'verbose_name_plural': 'Skill Effects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SkillEffectDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aoe', models.BooleanField(default=False, help_text='Effect applies to entire friendly or enemy group')),
                ('single_target', models.BooleanField(default=False, help_text='Effect applies to a single monster')),
                ('self_effect', models.BooleanField(default=False, help_text='Effect applies to the monster using the skill')),
                ('chance', models.IntegerField(blank=True, help_text='Chance of effect occuring per hit', null=True)),
                ('on_crit', models.BooleanField(default=False)),
                ('on_death', models.BooleanField(default=False)),
                ('random', models.BooleanField(default=False, help_text='Skill effect applies randomly to the target')),
                ('quantity', models.IntegerField(blank=True, help_text='Number of items this effect affects on the target', null=True)),
                ('all', models.BooleanField(default=False, help_text='This effect affects all items on the target')),
                ('self_hp', models.BooleanField(default=False, help_text="Amount of this effect is based on casting monster's HP")),
                ('target_hp', models.BooleanField(default=False, help_text="Amount of this effect is based on target monster's HP")),
                ('damage', models.BooleanField(default=False, help_text='Amount of this effect is based on damage dealt')),
                ('note', models.TextField(blank=True, help_text="Explain anything else that doesn't fit in other fields", null=True)),
                ('effect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.SkillEffect')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Skill')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon_filename', models.CharField(blank=True, max_length=100, null=True)),
                ('farmable_source', models.BooleanField(default=False)),
                ('meta_order', models.IntegerField(db_index=True, default=0)),
            ],
            options={
                'ordering': ['meta_order', 'icon_filename', 'name'],
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='effect',
            field=models.ManyToManyField(blank=True, help_text='Detailed skill effect information', related_name='effect', through='bestiary.SkillEffectDetail', to='bestiary.SkillEffect'),
        ),
        migrations.AddField(
            model_name='skill',
            name='scaling_stats',
            field=models.ManyToManyField(blank=True, help_text='Monster stats which this skill scales on', to='bestiary.ScalingStat'),
        ),
        migrations.AddField(
            model_name='skill',
            name='skill_effect',
            field=models.ManyToManyField(blank=True, to='bestiary.SkillEffect'),
        ),
        migrations.AddField(
            model_name='monster',
            name='craft_materials',
            field=models.ManyToManyField(through='bestiary.MonsterCraftCost', to='bestiary.CraftMaterial'),
        ),
        migrations.AddField(
            model_name='monster',
            name='leader_skill',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bestiary.LeaderSkill'),
        ),
        migrations.AddField(
            model_name='monster',
            name='skills',
            field=models.ManyToManyField(blank=True, to='bestiary.Skill'),
        ),
        migrations.AddField(
            model_name='monster',
            name='source',
            field=models.ManyToManyField(blank=True, help_text='Where this monster can be acquired from', to='bestiary.Source'),
        ),
        migrations.AddField(
            model_name='monster',
            name='transforms_into',
            field=models.ForeignKey(blank=True, help_text='Monster which this monster can transform into during battle', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='bestiary.Monster'),
        ),
        migrations.AddField(
            model_name='homunculusskill',
            name='craft_materials',
            field=models.ManyToManyField(help_text='Crafting materials required to purchase', through='bestiary.HomunculusSkillCraftCost', to='bestiary.CraftMaterial'),
        ),
        migrations.AddField(
            model_name='homunculusskill',
            name='monsters',
            field=models.ManyToManyField(to='bestiary.Monster'),
        ),
        migrations.AddField(
            model_name='homunculusskill',
            name='prerequisites',
            field=models.ManyToManyField(blank=True, help_text='Skills which must be acquired first', related_name='homunculus_prereq', to='bestiary.Skill'),
        ),
        migrations.AddField(
            model_name='homunculusskill',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Skill'),
        ),
        migrations.AddField(
            model_name='fusion',
            name='ingredients',
            field=models.ManyToManyField(to='bestiary.Monster'),
        ),
        migrations.AddField(
            model_name='fusion',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product', to='bestiary.Monster'),
        ),
        migrations.AddField(
            model_name='craftmaterial',
            name='source',
            field=models.ManyToManyField(blank=True, to='bestiary.Source'),
        ),
        migrations.AlterUniqueTogether(
            name='level',
            unique_together={('dungeon', 'floor', 'difficulty')},
        ),
    ]
