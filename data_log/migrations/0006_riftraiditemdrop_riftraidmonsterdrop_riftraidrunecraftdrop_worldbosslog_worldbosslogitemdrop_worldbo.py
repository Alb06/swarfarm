# Generated by Django 2.1.7 on 2019-03-23 01:21

import bestiary.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('bestiary', '0010_auto_20190318_1206'),
        ('herders', '0003_auto_20190213_1224'),
        ('data_log', '0005_auto_20190322_1821'),
    ]

    operations = [
        migrations.CreateModel(
            name='RiftRaidItemDrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='data_log.RiftRaidLog')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiftRaidMonsterDrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='data_log.RiftRaidLog')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiftRaidRuneCraftDrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem')])),
                ('rune', models.IntegerField(blank=True, choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance')], null=True)),
                ('stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')])),
                ('value', models.IntegerField(blank=True, null=True)),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='data_log.RiftRaidLog')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.RuneObjectBase),
        ),
        migrations.CreateModel(
            name='WorldBossLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wizard_id', models.BigIntegerField()),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], null=True)),
                ('battle_key', models.BigIntegerField(blank=True, null=True)),
                ('grade', models.IntegerField(choices=[(1, 'F'), (2, 'D'), (3, 'C'), (4, 'B-'), (5, 'B'), (6, 'B+'), (7, 'A-'), (8, 'A'), (9, 'A+'), (10, 'S'), (11, 'SS'), (12, 'SSS')])),
                ('damage', models.IntegerField()),
                ('battle_points', models.IntegerField()),
                ('bonus_battle_points', models.IntegerField()),
                ('avg_monster_level', models.FloatField()),
                ('monster_count', models.IntegerField()),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Level')),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.Summoner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorldBossLogItemDrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.GameItem')),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='data_log.WorldBossLog')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorldBossLogMonsterDrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('level', models.IntegerField()),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monsters', to='data_log.WorldBossLog')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bestiary.Monster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorldBossLogRuneDrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance')])),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField()),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), default=list, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), default=list, size=4)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runes', to='data_log.WorldBossLog')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, bestiary.models.RuneObjectBase),
        ),
    ]
