# Generated by Django 2.1.4 on 2019-01-31 06:26

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import herders.models
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bestiary', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuildingInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.IntegerField()),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Building')),
            ],
            options={
                'ordering': ['building'],
            },
        ),
        migrations.CreateModel(
            name='MonsterInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('com2us_id', models.BigIntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(blank=True, null=True)),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('skill_1_level', models.IntegerField(blank=True, default=1)),
                ('skill_2_level', models.IntegerField(blank=True, default=1)),
                ('skill_3_level', models.IntegerField(blank=True, default=1)),
                ('skill_4_level', models.IntegerField(blank=True, default=1)),
                ('fodder', models.BooleanField(default=False)),
                ('in_storage', models.BooleanField(default=False)),
                ('ignore_for_fusion', models.BooleanField(default=False)),
                ('priority', models.IntegerField(blank=True, choices=[(1, 'Low'), (2, 'Medium'), (3, 'High')], null=True)),
                ('notes', models.TextField(blank=True, help_text='<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank">Markdown syntax</a> enabled', null=True)),
                ('custom_name', models.CharField(blank=True, default='', max_length=20)),
                ('base_hp', models.IntegerField(blank=True, default=0)),
                ('rune_hp', models.IntegerField(blank=True, default=0)),
                ('base_attack', models.IntegerField(blank=True, default=0)),
                ('rune_attack', models.IntegerField(blank=True, default=0)),
                ('base_defense', models.IntegerField(blank=True, default=0)),
                ('rune_defense', models.IntegerField(blank=True, default=0)),
                ('base_speed', models.IntegerField(blank=True, default=0)),
                ('rune_speed', models.IntegerField(blank=True, default=0)),
                ('base_crit_rate', models.IntegerField(blank=True, default=0)),
                ('rune_crit_rate', models.IntegerField(blank=True, default=0)),
                ('base_crit_damage', models.IntegerField(blank=True, default=0)),
                ('rune_crit_damage', models.IntegerField(blank=True, default=0)),
                ('base_resistance', models.IntegerField(blank=True, default=0)),
                ('rune_resistance', models.IntegerField(blank=True, default=0)),
                ('base_accuracy', models.IntegerField(blank=True, default=0)),
                ('rune_accuracy', models.IntegerField(blank=True, default=0)),
                ('avg_rune_efficiency', models.FloatField(blank=True, null=True)),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Monster')),
            ],
            options={
                'ordering': ['-stars', '-level', 'monster__name'],
            },
        ),
        migrations.CreateModel(
            name='MonsterPiece',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pieces', models.IntegerField(default=0)),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Monster')),
            ],
            options={
                'ordering': ['monster__name'],
            },
        ),
        migrations.CreateModel(
            name='MonsterTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RuneCraftInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('com2us_id', models.BigIntegerField(blank=True, null=True)),
                ('type', models.IntegerField(choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem')])),
                ('rune', models.IntegerField(blank=True, choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance')], null=True)),
                ('stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')])),
                ('value', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['type', 'rune'],
            },
        ),
        migrations.CreateModel(
            name='RuneInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.IntegerField(choices=[(1, 'Energy'), (2, 'Fatal'), (3, 'Blade'), (4, 'Rage'), (5, 'Swift'), (6, 'Focus'), (7, 'Guard'), (8, 'Endure'), (9, 'Violent'), (10, 'Will'), (11, 'Nemesis'), (12, 'Shield'), (13, 'Revenge'), (14, 'Despair'), (15, 'Vampire'), (16, 'Destroy'), (17, 'Fight'), (18, 'Determination'), (19, 'Enhance'), (20, 'Accuracy'), (21, 'Tolerance')])),
                ('com2us_id', models.BigIntegerField(blank=True, null=True)),
                ('marked_for_sale', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('stars', models.IntegerField()),
                ('level', models.IntegerField()),
                ('slot', models.IntegerField()),
                ('original_quality', models.IntegerField(blank=True, choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], null=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('main_stat', models.IntegerField(choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')])),
                ('main_stat_value', models.IntegerField()),
                ('innate_stat', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('innate_stat_value', models.IntegerField(blank=True, null=True)),
                ('substats', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True), blank=True, null=True, size=4)),
                ('substat_values', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=4)),
                ('substat_crafts', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem')], null=True), blank=True, null=True, size=4)),
                ('substat_1', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('substat_1_value', models.IntegerField(blank=True, null=True)),
                ('substat_1_craft', models.IntegerField(blank=True, choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem')], null=True)),
                ('substat_2', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('substat_2_value', models.IntegerField(blank=True, null=True)),
                ('substat_2_craft', models.IntegerField(blank=True, choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem')], null=True)),
                ('substat_3', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('substat_3_value', models.IntegerField(blank=True, null=True)),
                ('substat_3_craft', models.IntegerField(blank=True, choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem')], null=True)),
                ('substat_4', models.IntegerField(blank=True, choices=[(1, 'HP'), (2, 'HP %'), (3, 'ATK'), (4, 'ATK %'), (5, 'DEF'), (6, 'DEF %'), (7, 'SPD'), (8, 'CRI Rate %'), (9, 'CRI Dmg %'), (10, 'Resistance %'), (11, 'Accuracy %')], null=True)),
                ('substat_4_value', models.IntegerField(blank=True, null=True)),
                ('substat_4_craft', models.IntegerField(blank=True, choices=[(0, 'Grindstone'), (1, 'Enchant Gem'), (2, 'Immemorial Grindstone'), (3, 'Immemorial Gem')], null=True)),
                ('quality', models.IntegerField(choices=[(0, 'Normal'), (1, 'Magic'), (2, 'Rare'), (3, 'Hero'), (4, 'Legend')], default=0)),
                ('has_hp', models.BooleanField(default=False)),
                ('has_atk', models.BooleanField(default=False)),
                ('has_def', models.BooleanField(default=False)),
                ('has_crit_rate', models.BooleanField(default=False)),
                ('has_crit_dmg', models.BooleanField(default=False)),
                ('has_speed', models.BooleanField(default=False)),
                ('has_resist', models.BooleanField(default=False)),
                ('has_accuracy', models.BooleanField(default=False)),
                ('substat_upgrades_remaining', models.IntegerField(blank=True, null=True)),
                ('efficiency', models.FloatField(blank=True, null=True)),
                ('max_efficiency', models.FloatField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.MonsterInstance')),
            ],
            options={
                'ordering': ['slot', 'type', 'level'],
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('magic_essence', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), default=herders.models._default_storage_data, help_text='Magic Essence', size=3)),
                ('fire_essence', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), default=herders.models._default_storage_data, help_text='Fire Essence', size=3)),
                ('water_essence', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), default=herders.models._default_storage_data, help_text='Water Essence', size=3)),
                ('wind_essence', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), default=herders.models._default_storage_data, help_text='Wind Essence', size=3)),
                ('light_essence', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), default=herders.models._default_storage_data, help_text='Light Essence', size=3)),
                ('dark_essence', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), default=herders.models._default_storage_data, help_text='Dark Essence', size=3)),
                ('wood', models.IntegerField(default=0, help_text='Hard Wood')),
                ('leather', models.IntegerField(default=0, help_text='Tough Leather')),
                ('rock', models.IntegerField(default=0, help_text='Solid Rock')),
                ('ore', models.IntegerField(default=0, help_text='Solid Iron Ore')),
                ('mithril', models.IntegerField(default=0, help_text='Shining Mythril')),
                ('cloth', models.IntegerField(default=0, help_text='Thick Cloth')),
                ('rune_piece', models.IntegerField(default=0, help_text='Rune Piece')),
                ('dust', models.IntegerField(default=0, help_text='Magic Dust')),
                ('symbol_harmony', models.IntegerField(default=0, help_text='Symbol of Harmony')),
                ('symbol_transcendance', models.IntegerField(default=0, help_text='Symbol of Transcendance')),
                ('symbol_chaos', models.IntegerField(default=0, help_text='Symbol of Chaos')),
                ('crystal_water', models.IntegerField(default=0, help_text='Frozen Water Crystal')),
                ('crystal_fire', models.IntegerField(default=0, help_text='Flaming Fire Crystal')),
                ('crystal_wind', models.IntegerField(default=0, help_text='Whirling Wind Crystal')),
                ('crystal_light', models.IntegerField(default=0, help_text='Shiny Light Crystal')),
                ('crystal_dark', models.IntegerField(default=0, help_text='Pitch-black Dark Crystal')),
                ('crystal_magic', models.IntegerField(default=0, help_text='Condensed Magic Crystal')),
                ('crystal_pure', models.IntegerField(default=0, help_text='Pure Magic Crystal')),
            ],
        ),
        migrations.CreateModel(
            name='Summoner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summoner_name', models.CharField(blank=True, max_length=256, null=True)),
                ('com2us_id', models.BigIntegerField(blank=True, default=None, null=True)),
                ('server', models.IntegerField(blank=True, choices=[(0, 'Global'), (1, 'Europe'), (2, 'Asia'), (3, 'Korea'), (4, 'Japan'), (5, 'China')], default=0, null=True)),
                ('public', models.BooleanField(blank=True, default=False)),
                ('timezone', timezone_field.fields.TimeZoneField(default='America/Los_Angeles')),
                ('notes', models.TextField(blank=True, null=True)),
                ('preferences', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('following', models.ManyToManyField(related_name='followed_by', to='herders.Summoner')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('favorite', models.BooleanField(blank=True, default=False)),
                ('description', models.TextField(blank=True, help_text='<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank">Markdown syntax</a> enabled', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TeamGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='team',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='herders.TeamGroup'),
        ),
        migrations.AddField(
            model_name='team',
            name='leader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_leader', to='herders.MonsterInstance'),
        ),
        migrations.AddField(
            model_name='team',
            name='level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bestiary.Level'),
        ),
        migrations.AddField(
            model_name='team',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner'),
        ),
        migrations.AddField(
            model_name='team',
            name='roster',
            field=models.ManyToManyField(blank=True, to='herders.MonsterInstance'),
        ),
        migrations.AddField(
            model_name='storage',
            name='owner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner'),
        ),
        migrations.AddField(
            model_name='runeinstance',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner'),
        ),
        migrations.AddField(
            model_name='runecraftinstance',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner'),
        ),
        migrations.AddField(
            model_name='monsterpiece',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner'),
        ),
        migrations.AddField(
            model_name='monsterinstance',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner'),
        ),
        migrations.AddField(
            model_name='monsterinstance',
            name='tags',
            field=models.ManyToManyField(blank=True, to='herders.MonsterTag'),
        ),
        migrations.AddField(
            model_name='buildinginstance',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='herders.Summoner'),
        ),
    ]
