# Generated by Django 2.2.17 on 2020-12-30 00:08

from django.db import migrations


def populate_new_storage(apps, schema_editor):
    GameItem = apps.get_model('bestiary', 'GameItem')
    OldStorage = apps.get_model('herders', 'Storage')
    MaterialStorage = apps.get_model('herders', 'MaterialStorage')

    # Build a reference of old storage field names to game item PKs
    essence_pks = {
        # [low, mid, high]
        'water_essence': [
            GameItem.objects.get(category=11, com2us_id=11001).pk,
            GameItem.objects.get(category=11, com2us_id=12001).pk,
            GameItem.objects.get(category=11, com2us_id=13001).pk,
        ],
        'fire_essence': [
            GameItem.objects.get(category=11, com2us_id=11002).pk,
            GameItem.objects.get(category=11, com2us_id=12002).pk,
            GameItem.objects.get(category=11, com2us_id=13002).pk,
        ],
        'wind_essence': [
            GameItem.objects.get(category=11, com2us_id=11003).pk,
            GameItem.objects.get(category=11, com2us_id=12003).pk,
            GameItem.objects.get(category=11, com2us_id=13003).pk,
        ],
        'light_essence': [
            GameItem.objects.get(category=11, com2us_id=11004).pk,
            GameItem.objects.get(category=11, com2us_id=12004).pk,
            GameItem.objects.get(category=11, com2us_id=13004).pk,
        ],
        'dark_essence': [
            GameItem.objects.get(category=11, com2us_id=11005).pk,
            GameItem.objects.get(category=11, com2us_id=12005).pk,
            GameItem.objects.get(category=11, com2us_id=13005).pk,
        ],
        'magic_essence': [
            GameItem.objects.get(category=11, com2us_id=11006).pk,
            GameItem.objects.get(category=11, com2us_id=12006).pk,
            GameItem.objects.get(category=11, com2us_id=13006).pk,
        ],
    }

    other_pks = {
        # Crafting materials
        'wood': GameItem.objects.get(category=29, com2us_id=1001).pk,
        'leather': GameItem.objects.get(category=29, com2us_id=1002).pk,
        'rock': GameItem.objects.get(category=29, com2us_id=1003).pk,
        'ore': GameItem.objects.get(category=29, com2us_id=1004).pk,
        'mithril': GameItem.objects.get(category=29, com2us_id=1005).pk,
        'cloth': GameItem.objects.get(category=29, com2us_id=1006).pk,
        'rune_piece': GameItem.objects.get(category=29, com2us_id=2001).pk,
        'dust': GameItem.objects.get(category=29, com2us_id=3001).pk,
        'symbol_harmony': GameItem.objects.get(category=29, com2us_id=4001).pk,
        'symbol_transcendance': GameItem.objects.get(category=29, com2us_id=4002).pk,
        'symbol_chaos': GameItem.objects.get(category=29, com2us_id=4003).pk,
        'crystal_water': GameItem.objects.get(category=29, com2us_id=5001).pk,
        'crystal_fire': GameItem.objects.get(category=29, com2us_id=5001).pk,
        'crystal_wind': GameItem.objects.get(category=29, com2us_id=5001).pk,
        'crystal_light': GameItem.objects.get(category=29, com2us_id=5001).pk,
        'crystal_dark': GameItem.objects.get(category=29, com2us_id=5001).pk,
        'crystal_magic': GameItem.objects.get(category=29, com2us_id=6001).pk,
        'crystal_pure': GameItem.objects.get(category=29, com2us_id=7001).pk,
        'conversion_stone': GameItem.objects.get(category=75, com2us_id=1).pk,

        # Material monsters
        'fire_angelmon': GameItem.objects.get(category=61, com2us_id=142120115).pk,
        'water_angelmon': GameItem.objects.get(category=61, com2us_id=142110115).pk,
        'wind_angelmon': GameItem.objects.get(category=61, com2us_id=142130115).pk,
        'light_angelmon': GameItem.objects.get(category=61, com2us_id=142140115).pk,
        'dark_angelmon': GameItem.objects.get(category=61, com2us_id=142150115).pk,
        'fire_king_angelmon': GameItem.objects.get(category=61, com2us_id=182120115).pk,
        'water_king_angelmon': GameItem.objects.get(category=61, com2us_id=182110115).pk,
        'wind_king_angelmon': GameItem.objects.get(category=61, com2us_id=182130115).pk,
        'light_king_angelmon': GameItem.objects.get(category=61, com2us_id=182140115).pk,
        'dark_king_angelmon': GameItem.objects.get(category=61, com2us_id=182150115).pk,
        'rainbowmon_2_20': GameItem.objects.get(category=61, com2us_id=143140220).pk,
        'rainbowmon_3_1': GameItem.objects.get(category=61, com2us_id=143140301).pk,
        'rainbowmon_3_25': GameItem.objects.get(category=61, com2us_id=143140325).pk,
        'rainbowmon_4_1': GameItem.objects.get(category=61, com2us_id=143140401).pk,
        'rainbowmon_4_30': GameItem.objects.get(category=61, com2us_id=143140430).pk,
        'rainbowmon_5_1': GameItem.objects.get(category=61, com2us_id=143140501).pk,
        'devilmon': GameItem.objects.get(category=61, com2us_id=151050101).pk,
        'super_angelmon': GameItem.objects.get(category=61, com2us_id=217140115).pk,
    }

    # Migrate old storage model to new one
    batch_size = 10000
    new_objs = []

    for storage in OldStorage.objects.all().iterator(chunk_size=250):
        # Create new objects for essences
        for key, item_id in essence_pks.items():
            for idx, quantity in enumerate(getattr(storage, key)):
                if quantity > 0:
                    new_objs.append(MaterialStorage(
                        owner_id=storage.owner_id,
                        quantity=quantity,
                        item_id=item_id[idx]
                    ))

        # Create new objects for other materials
        for key, item_id in other_pks.items():
            quantity = getattr(storage, key)
            if quantity > 0:
                new_objs.append(MaterialStorage(
                    owner_id=storage.owner_id,
                    quantity=quantity,
                    item_id=item_id,
                ))

        try:
            # Perform bulk insert if batch size exceeded and clear new object array
            if len(new_objs) >= batch_size:
                MaterialStorage.objects.bulk_create(new_objs)
                new_objs = []
        except Exception as e:
            print(f'Error when bulk inserting. Last storage processed: {storage.pk}')
            raise e

    # Insert any leftovers
    if len(new_objs):
        MaterialStorage.objects.bulk_create(new_objs)


def noop(*args, **kwargs):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('herders', '0020_auto_20201205_1705'),
    ]

    operations = [
        migrations.RunPython(populate_new_storage, noop)
    ]
