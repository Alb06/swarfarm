# Generated by Django 2.2.17 on 2021-01-18 01:48

from django.db import migrations
from django.db.models import Count
import itertools

def delete_duplicates(apps, schema_editor):
    MaterialStorage = apps.get_model('herders', 'MaterialStorage')
    MonsterShrineStorage = apps.get_model('herders', 'MonsterShrineStorage')
    MonsterPiece = apps.get_model('herders', 'MonsterPiece')
    Summoner = apps.get_model('herders', 'Summoner')

    summoner_ids = Summoner.objects.values_list('id', flat=True)

    for summoner_id in summoner_ids:
        material_storage_deleted = 0
        monster_shrine_storage_deleted = 0
        monster_piece_deleted = 0

        summoner_material_storage = MaterialStorage.objects.select_related('item').filter(owner_id=summoner_id)
        for _, g in itertools.groupby(summoner_material_storage, lambda x: x.item):
            records = list(g)
            for record in records[1:]:
                material_storage_deleted += 1
                record.delete()

        summoner_monster_shrine_storage = MonsterShrineStorage.objects.select_related('item').filter(owner_id=summoner_id)
        for _, g in itertools.groupby(summoner_monster_shrine_storage, lambda x: x.item):
            records = list(g)
            for record in records[1:]:
                monster_shrine_storage_deleted += 1
                record.delete()
        
        summoner_monster_piece = MonsterPiece.objects.select_related('monster').filter(owner_id=summoner_id)
        for _, g in itertools.groupby(summoner_monster_piece, lambda x: x.monster):
            records = list(g)
            for record in records[1:]:
                monster_piece_deleted += 1
                record.delete()
        
        if material_storage_deleted or monster_shrine_storage_deleted or monster_piece_deleted:
            # UserID : Material, Shrine, Pieces
            # i.e. 42 : 0, 0, 3
            print(summoner_id, ":", material_storage_deleted, ",", monster_shrine_storage_deleted, ",", monster_piece_deleted)

def noop(*args, **kwargs):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('bestiary', '0028_auto_20201111_1135'),
        ('herders', '0022_auto_20201229_1609'),
    ]

    operations = [
        migrations.RunPython(delete_duplicates, noop),
        migrations.AlterUniqueTogether(
            name='materialstorage',
            unique_together={('owner', 'item')},
        ),
        migrations.AlterUniqueTogether(
            name='monsterpiece',
            unique_together={('owner', 'monster')},
        ),
        migrations.AlterUniqueTogether(
            name='monstershrinestorage',
            unique_together={('owner', 'item')},
        ),
    ]
